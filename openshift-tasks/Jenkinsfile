#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/e5e1-jenkins/jenkins-agent-appdev:latest",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      def guid = "e5e1"
      def devProject = "${guid}-tasks-dev"
      def prodProject = "${guid}-tasks-prod"

      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-" + currentBuild.number
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // Execute Maven Build
	sh "${mvnCmd} clean package -DskipTests=true"
      }

      // The next two stages should run in parallel
        parallel (
          // Using Maven run the unit tests
          "Unit Tests": {
            stage('Unit Tests') {
              echo "Running Unit Tests"
          
              // Execute Unit Tests
              sh "${mvnCmd} test"
            }
          },

          // Using Maven to call SonarQube for Code Analysis
          "Code Analysis": {
            stage('Code Analysis') {
              echo "Running Code Analysis"

              // Execute Sonarqube Tests
              sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000 -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
            }
          }
        )
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // Build Image, tag Image
        openshift.withCluster() {
          openshift.withProject("${devProject}") {
	    openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
            openshift.tag("tasks:latest", "tasks:${devTag}")
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
        openshift.withCluster() {
          openshift.withProject("${devProject}") {
            openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")
            
            // Update the config map which contains the users for the tasks application
            // (just in case the properties files changed in the latest commit)
            openshift.selector('configmap', 'tasks-config').delete()
            def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

            // Deploy the dev application
            openshift.set("env", "dc/tasks", "--overwrite VERSION='${devTag} (tasks-dev)'")
            openshift.selector("dc", "tasks").rollout().latest();

            // Wait for application to be deployed
            def dc = openshift.selector("dc", "tasks").object()
            def dc_version = dc.status.latestVersion
            def rc = openshift.selector("rc", "tasks-${dc_version}").object()
             
            echo "waiting for ReplicationConroller tasks-${dc_version} to be ready"
            while (rc.spec.replicas != rc.status.readyReplicas) {
              sleep 5
              rc = openshift.selector("rc", "tasks-${dc_version}").object()
            }
          }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // Copy image to Nexus container registry
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"  
        // Tag the built image with the production tag
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            debug = openshift.selector("route", "tasks").object()
            echo "[DEBUG] route tasks: ${debug}"
            activeApp = openshift.selector("route", "tasks").object().spec.to.name
            
            if (activeApp == "tasks-green") {
              destApp = "tasks-blue"
            }

            echo "Active Application:      " + activeApp
            echo "Destination Application: " + destApp
            // Update the image on the Prod deployment config
            def dc = openshift.selector("dc", "${destApp}").object()
            dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"
            dc.spec.template.spec.contianers[0].env = "${prodTag} (${destApp})"
            //openshift.set("env", "dc/${destApp}", "--overwrite VERSION='${prodTag} (${destApp})'")
            openshift.apply(dc)

            // Update config map just in case config files changed in the source
            openshift.selector("configmap", "${destApp}-config").delete()
            def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

            // Deploy inactive application
            openshift.selector("dc", "${destApp}").rollout().latest();

            // Wait for application to be deployed
            def dc_prod = openshift.selector("dc", "${destApp}").object()
            def dc_version = dc_prod.status.latestVersion
            def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
            echo "Waiting for ${destApp} to be ready"
           
            while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
              sleep 5
              rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
            } 

            debug = openshift.selector("route", "tasks").object()
            echo "[DEBUG22] route tasks: ${debug}"

            activeApp = openshift.selector("route", "tasks").object().spec.to.name
            if (activeApp == "tasks-green") {
              destApp = "tasks-blue"
            }

            echo "Active Application:      " + activeApp
            echo "Destination Application: " + destApp
          }
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to tasks-prod."
        // Execute switch
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            def route = openshift.selector("route/tasks").object()
            route.spec.to.name="${destApp}"
            openshift.apply(route)
              
          }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
